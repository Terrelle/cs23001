// Terrelle Tettey
// Utilities Implementation
// CS23001

#include "utilities.hpp"

String toPostFix(String infix){
    stack<String> s;
    String postFix;
    String right, left, op;
    std::vector<String> token = infix.split(' ');

    int i = 0;
    while(token[i] != ";"){
        if(token[i] == ")"){
            right = s.pop();
            op    = s.pop();
            left  = s.pop();
            s.push(left + " " + right + " " + op);
        } else if(token[i] != "("){
            s.push(token[i]);
        }
        ++i;
    }
    postFix = s.top();
    s       = stack<String>();
    return postFix;
}

String getOperator(const String& op){
    switch (op[0])
    {
    case '+':
        return "    AD    ";
        break;
    case '-':
        return "    SB    ";
        break;
    case '*':
        return "    MU    ";
        break;
    case '/':
        return "    DV    ";
        break;
    
    default:
        return "   UNDEF    ";
    }
}

String intToString(int num){
    if(!num)
    return "0";

    String result;
    do {
        result += (num % 10 + 48);
        num /= 10;
    } while(num > 0);

    return result;
} 

String getToken(std::istream& in) {
    String result;
    char token = '\0';

    for (int i = 0; !in.eof() && token != ' '; ++i){
        in.get(token); 
        if(token == ';')
        return ";";
        else if(token != ' ')
        result += token;
    }

    return result;
}



void PostToAssembly(std::istream& in, std::ostream& out){
    stack<String> s;

    String left, oper, 
    right, token, 
    tempVar;

    int tempN = 1;


    
    while(!in.eof()){

        if(!in.eof()){
       token = getToken(in);
        } else
        break;

        if(token == ";"){
            tempVar = "TMP" + intToString(tempN++);
            out << "    ST    " << tempVar << std::endl;
            out << std::endl;
            tempN = 1;
        }

        if(token != "+" && token != "-" && token != "*" && token != "/"){
            s.push(token);
        } else {
            right = s.pop();
            left  = s.pop();

            
            out << "    LD    " << left << std::endl;

            oper = getOperator(token);
            out << oper << right << std::endl;

            tempVar = "TMP" + intToString(tempN++);
            s.push(tempVar);

            out << "    ST    " << tempVar << std::endl;
        }
    }

}






//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        
// Author:      
//
// Description: Class implementation for a log entry.
//
//

////////////////////////////////////////////////////////////
#include <iostream>
#include <vector> 

#include "string.hpp" 
#include "logentry.hpp"

int toInt(String str);

std::ostream& operator<<(std::ostream& out, Date rhs){
    out << rhs.day << "/" << rhs.month << "/" << rhs.year;

    return out;
}

std::ostream& operator<<(std::ostream& out, Time rhs){
    out << rhs.hour << ":" << rhs.minute << ":" << rhs.second;
    return out;
}


Date::Date(String d)
{
    day = toInt(d.substr(1, 2));
    month = toInt(d.substr(3, 7));
    year = toInt(d.substr(8,11));
}

Time::Time(String t)
{
    hour = toInt(t.substr(13,14));
    minute = toInt(t.substr(16,17));
    second = toInt(t.substr(19,20));
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
LogEntry::LogEntry(String s) {
    // ...
    std::vector<String> vec = s.split(' ');


    if(vec.size() != 10){
        return;
    }

    // assigning each object to its corresponding vector position
    host = vec[0];
    date = vec[3];
    time = vec[3];
    request = vec[5] + " " + vec[6] + " " + vec[7];
    status = vec[8];

    String temp = vec[9].substr(0, vec[9].length()); // contains number of bytes
    if(temp != '-')
    number_of_bytes = toInt(temp);
    else
    number_of_bytes = 0;

    log = "Host: " + host + '\n' + "Date: " + vec[3].substr(1, 2) + "" + vec[3].substr(3, 7) + "" + vec[3].substr(8, 11) + '\n' + "Time: " + vec[3].substr(13, 14) + ":" + vec[3].substr(16, 17) + ":" + vec[3].substr(19, 20) + '\n' + "Request: " + request + '\n' + "Status: " + status + '\n' + "Bytes: " + temp + '\n'; 

    
    
}


////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//


std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;

    
    while(!in.eof()){ 
        String line;
        char ch;
        in.get(ch);

        while(ch != '\n'){
            line += ch;
            in.get(ch);
        }
        result.push_back(line);
    }
    return result;
}
/*
std::ostream& operator<<(std::ostream& out, const LogEntry& rhs){
    out << rhs.getHost() << " " << " " << rhs.getDate() << " " << rhs.getNumberOfBytes()<< " " << rhs.getStatus() << rhs.getRequest() << std::endl;

    return out;
}
*/
////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void output_all(std::ostream& out, const std::vector<LogEntry> &rhs) {
    std::cout << "This is output all function: " << std::endl;
    for(int i = 0; i < int(rhs.size()); ++i)
    out << rhs[i].getLog() << std::endl;
}
////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void by_host(std::ostream& out, const std::vector<LogEntry>&rhs) {
    std::cout << "Host: " << std::endl;
    for(int i = 0; i < int(rhs.size()); ++i)
        out << rhs[i].getHost();
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
int byte_count(const std::vector<LogEntry> &rhs) {
    std::cout << "Number of bytes: " << std::endl;

    int result = 0;

    for(int i = 0; i < int(rhs.size()); ++i)
       result+= rhs[i].getNumberOfBytes();
    return result;

} 

int toInt(String str)
{
    int result = 0;

    for(int i = 0; i < str.length(); ++i){
        result *= 10;
        result += str[i] - '0';
    }
    return result;
}